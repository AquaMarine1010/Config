;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update nil
   dotspacemacs-elpa-subdirectory nil
   dotspacemacs-editing-style '(hybrid :variables
                                       hybrid-style-visual-feedback nil
                                       hybrid-style-enable-evilified-state t
                                       hybrid-style-enable-hjkl-bindings nil
                                       hybrid-style-use-evil-search-module nil
                                       hybrid-style-default-state 'normal)
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   dotspacemacs-startup-buffer-responsive t
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Ricty"
                               :size 18
                               :weight light
                               :width normal
                               :powerline-scale 1.3 )
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-ex-command-key ":"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-remap-Y-to-y$ nil
   dotspacemacs-retain-visual-state-on-shift t
   dotspacemacs-visual-line-move-text nil
   dotspacemacs-ex-substitute-global nil
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-large-file-size 1
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-helm-use-fuzzy 'always
   dotspacemacs-enable-paste-transient-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-show-transient-state-title t
   dotspacemacs-show-transient-state-color-guide t
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers t
   dotspacemacs-folding-method 'evil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-smart-closing-parenthesis nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup nil
   )
)

(defun dotspacemacs/user-init ()
  (add-to-list 'load-path "~/.spacemacs.d/configs/init/")
  (load "git")
  (load "skk")
  (load "background")
  (load "minibuffer")
  (load "css")
  (load "terraform")
  (load "chrome_layer_config")
  (load "python")
  (load "go")
  (load "c++")
  (load "rust")
  ;; (load "doom-themes")
  )



(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     asciidoc
     nginx
     ivy
     better-defaults
     osx
     shell
     ansible
     javascript
     php
     windows-scripts
     typescript     
     csv
     docker
     emacs-lisp
     git
     go
     helm
     markdown
     org
     python
     ruby
     sql
     terraform
     ;yaml
     typescript
     rust
     react
     java
     chrome
     slack
     (syntax-checking :variables syntax-checking-enable-by-default nil)
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence nil
                      auto-completion-complete-with-key-sequence-delay 0.1
                      auto-completion-minimum-prefix-length 2
                      auto-completion-idle-delay 0.2
                      auto-completion-private-snippets-directory nil
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-enable-help-tooltip nil
                      auto-completion-use-company-box nil
                      auto-completion-enable-sort-by-usage nil
      )
     )
   dotspacemacs-additional-packages '(
                                      minimap
                                      counsel
                                      counsel-recentf
                                      counsel-rg
                                      ddskk
                                      dockerfile
                                      dumb-jump
                                      find-file-in-project
                                      neotree
                                      symbol-overlay
                                      yatex
                                      rjsx
                                      go-autocomplete
                                      web-mode
                                      tern
                                      company
                                      add-node-modules-path
                                      tern-auto-complete
                                      flycheck
                                      use-package
                                      doom-themes
                                      doom-modeline
                                      git-gutter
                                      highlight-indent-guides
                                      )
   dotspacemacs-frozen-packages '()

   dotspacemacs-excluded-packages '(
                                    ;company-tern
                                    ;company-frontends
                                    )
   dotspacemacs-install-packages 'used-only))


(defun dotspacemacs/user-config ()
  (require 'use-package)
  (add-to-list 'load-path "~/.spacemacs.d/configs/user-conf/")
  (load "keybind")
  (load "typescript")
  (load "javascript")
  (load "html")
  (load "react")
  (load "json")
  (load "shellenv")
  (load "alias")
)


(defun dotspacemacseuser-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  (setq ispell-program-name "aspell")
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (adoc-mode markup-faces pdf-tools emoji-cheat-sheet-plus company-emoji doom-modeline shrink-path all-the-icons doom-themes highlight-indent-guides sudo-edit python python-pytest python-switch-quotes python-test python-x python-mode flycheck-yamllint flymake-yaml indent-tools nginx-mode flycheck-rust flycheck-pos-tip tern-auto-complete add-node-modules-path slack emojify circe oauth2 websocket nadvice ht gmail-message-mode ham-mode html-to-markdown flymd edit-server company-emacs-eclim eclim toml-mode racer pos-tip cargo rust-auto-use rust-playground rust-mode prettier reveal-in-osx-finder pbcopy osx-trash xterm-color unfill shell-pop minimap osx-dictionary mwim multi-term launchctl git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter eshell-z eshell-prompt-extras esh-help diff-hl wgrep smex ivy-hydra flyspell-correct-ivy counsel-projectile jinja2-mode company-ansible ansible-doc ansible sqlformat terraform-doc flymake-go go-complete go-direx go-errcheck rjsx-mode js-react-redux-yasnippets twittering-mode flyspell-correct-helm flyspell-correct auto-dictionary dash-functional phpunit phpcbf php-extras php-auto-yasnippets drupal-mode php-mode serverspec powershell mew ac-etags git git-annex git-attr transient git-commit with-editor undo-tree magit-popup k8s-mode lv swiper ivy symbol-overlay counsel find-file-in-project google-this docker tablist docker-tramp tide typescript-mode flycheck noflet ensime sbt-mode scala-mode dockerfile-mode csv-mode helm-etags-plus sql-indent go-autocomplete java-snippets react-snippets aws-snippets yasnippet-snippets evil-magit smeargle orgit magit-gitflow ghub helm-gitignore gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link magit web-mode tagedit slim-mode scss-mode sass-mode pug-mode helm-css-scss haml-mode emmet-mode company-web web-completion-data hcl-mode ctags-update rvm ruby-tools ruby-test-mode rubocop rspec-mode robe rbenv rake minitest chruby bundler inf-ruby company-terraform go-guru go-eldoc company-go go-mode terraform-mode helm-company helm-c-yasnippet fuzzy company-tern tern company-statistics company-anaconda company auto-yasnippet ac-ispell auto-complete yatex cdb ccc org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download mmm-mode markdown-toc markdown-mode htmlize gnuplot gh-md spinner powerline skewer-mode simple-httpd json-snatcher json-reformat yasnippet multiple-cursors js2-mode hydra parent-mode projectile pkg-info epl flx smartparens iedit anzu evil goto-chg highlight bind-map bind-key packed helm avy popup helm-core async f dash s ddskk pyenv-mode anaconda-mode pythonic yapfify ws-butler winum which-key web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spaceline restart-emacs request rainbow-delimiters pyvenv pytest py-isort popwin pip-requirements persp-mode pcre2el paradox org-projectile org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint json-mode js2-refactor js-doc indent-guide hy-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu elisp-slime-nav dumb-jump diminish define-word cython-mode column-enforce-mode coffee-mode clean-aindent-mode bracketed-paste auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(magit-diff-added ((t (:background "black" :foreground "green"))))
 '(magit-diff-added-highlight ((t (:background "white" :foreground "green"))))
 '(magit-diff-removed ((t (:background "black" :foreground "blue"))))
 '(magit-diff-removed-hightlight ((t (:background "white" :foreground "blue"))))
 '(magit-hash ((t (:foreground "red"))))
 '(web-mode-block-delimiter-face ((t :inherit font-lock-negation-char-face)))
 '(web-mode-comment-face ((t :inherit font-lock-comment-face)))
 '(web-mode-css-at-rule-face ((t :inherit font-lock-keyword-face)))
 '(web-mode-css-color-face ((t :inherit font-lock-reference-face)))
 '(web-mode-css-pseudo-class-face ((t :inherit font-lock-function-name-face)))
 '(web-mode-css-rule-face ((t :inherit font-lock-function-name-face)))
 '(web-mode-current-element-highlight-face ((t :inherit font-lock-builtin-face)))
 '(web-mode-doctype-face ((t :inherit font-lock-doc-face)))
 '(web-mode-error-face ((t :inherit font-lock-warning-face)))
 '(web-mode-function-call-face ((t :inherit font-lock-function-name-face)))
 '(web-mode-function-name-face ((t :inherit font-lock-function-name-face)))
 '(web-mode-html-attr-name-face ((t :inherit font-lock-variable-name-face)))
 '(web-mode-html-attr-value-face ((t :inherit font-lock-string-face)))
 '(web-mode-html-tag-bracket-face ((t :inherit font-lock-negation-char-face)))
 '(web-mode-html-tag-face ((t :inherit font-lock-function-name-face)))
 '(web-mode-javascript-comment-face ((t :inherit font-lock-comment-face)))
 '(web-mode-javascript-string-face ((t :inherit font-lock-string-face)))
 '(web-mode-json-comment-face ((t :inherit font-lock-comment-face)))
 '(web-mode-json-key-face ((t :inherit font-lock-keyword-face)))
 '(web-mode-json-string-face ((t :inherit font-lock-string-face)))
 '(web-mode-keyword-face ((t :inherit font-lock-keyword-face)))
 '(web-mode-param-name-face ((t :inherit font-lock-variable-name-face)))
 '(web-mode-preprocessor-face ((t :inherit font-lock-preprocessor-face)))
 '(web-mode-server-comment-face ((t :inherit font-lock-comment-face)))
 '(web-mode-string-face ((t :inherit font-lock-string-face)))
 '(web-mode-type-face ((t :inherit font-lock-type-face)))
 '(web-mode-variable-name-face ((t :inherit font-lock-variable-name-face)))
 '(web-mode-warning-face ((t :inherit font-lock-warning-face))))
