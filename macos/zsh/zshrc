# Path to your oh-my-zsh installation.
USER=$(whoami)
export ZSH_DISABLE_COMPFIX=true
export ZSH=$HOME/.oh-my-zsh
export PATH=$HOME/bin:$PATH
export CONFIGPATH=$HOME/Conf
export CLOUDSDK_PYTHON=/usr/bin/python2.7

ZSH_THEME="powerlevel9k/powerlevel9k"
export TERM="xterm-256color"

POWERLEVEL9K_MODE="nerdfont-complete"
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs ssh)
POWERLEVEL9K_DISABLE_RPROMPT=true

plugins=(
    git
    zsh-autosuggestions
)

export SAVEHIST=100000

# User configuration

source $ZSH/oh-my-zsh.sh

# 大文字小文字を共にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'

# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# フローコントロールを無効にする
setopt no_flow_control

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd
# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# = の後はパス名として補完する
setopt magic_equal_subst

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks


# 高機能なワイルドカード展開を使用する
setopt extended_glob

# cd+<Tab>でディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt auto_pushd

# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加されない
setopt pushd_ignore_dups

# PYTHON pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PATH:PYENV_ROOT/shims"
eval "$(pyenv init -)"

# Go PATH
export GOPATH="$HOME/dev/"
export GOENV_ROOT="$HOME/.goenv"
export PATH="$GOPATH/bin:$PATH"

# terraform
export PATH="$HOME/.tfenv/bin:$PATH"

# Javascript
## node brew
export PATH=$PATH:$HOME/.nodebrew/current/bin

# tex
export PATH="$PATH:/usr/local/texlive/2020/bin/x86_64-darwin/"

# Rust
export PATH="$PATH:$HOME/.cargo/bin"

# ruby
eval "$(rbenv init -)"

# 補完
autoload -U compinit


#Google Cloud Platform
# export CLOUDSDK_PYTHON=/usr/bin/python2.7
export GOOGLE_AUTH_SUPPRESS_CREDENTIALS_WARNINGS=true
# export GCP_PROJECT=$(gcloud config get-value core/project)
# export GOOGLE_CLOUD_KEYFILE_JSON=$HOME/.config/gcloud/credential/$GCP_PROJECT.json

#GCP Service Account
# export GOOGLE_APPLICATION_CREDENTIALS=~/.config/gcloud/credentials/editor-iam.jsonb
# export GOOGLE_ACCOUNT_INFO=~/.config/gcloud/configurations/config_default
export GOOGLEWORKSPACE_CREDENTIALS=$HOME/.config/gcp/aquamarine-cloud/service_accounts/workspace_service_account.json

# AWS config
export AWS_CREDENTIAL=$HOME/.config/aws/credentials/office.csv

alias aws="aws --profile company"

# Terraform config
## aws credential
export TF_VAR_aws_credential=$AWS_CREDENTIAL

## gcp default pj
export TF_VAR_default_project=$GCP_PROJECT

#### function
function peco-history-selection(){
    BUFFER=`\\history -n 1 | tail -r | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}

zle -N peco-history-selection
bindkey '^R' peco-history-selection
bindkey 'M-"' quote-region
bindkey 'M-]' quote-line
# auto complete
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=13'

export DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/src/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/src/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/src/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/src/google-cloud-sdk/completion.zsh.inc'; fi

#########################################################
##################docker#################################
#########################################################

export DOCKER_HOST=unix://$HOME/.lima/docker/sock/docker.sock

#########################################################
#################snipet##################################
#########################################################

cdls (){
    \cd "$@" && ls
}

#########################################################
#################mac copy################################
#########################################################

if which pbcopy > /dev/null 2>&1 ; then
   alias -g C='| pbcopy'
fi

#########################################################
#################emacs###################################
#########################################################

if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh ]]; then
    source ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh
    # Initialize TITLE
    print -Pn "\e]2;%m:%2~\a"
fi


#########################################################
################Alias####################################
#########################################################
# System command
alias -g L='| less'
alias -g G='| grep'
alias cd='cdls'
alias mkdir='mkdir -p'

# brew
alias b='brew'
alias bi='brew install'
alias bs='brew search'
alias bl='brew list'
alias bo='brew outdated'
alias bc='brew cleanup'
alias bup='brew update'
alias bug='brew upgrade'
alias bui='brew uninstall'
# git
# git treeの表示
alias gtree='git log --graph --branches --pretty="format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset"'

#emacs client
# alias ec='emacsclient'
# alias emacs='emacs -nw'

#AWS reagion set
alias virginia='export AWS_DEFAULT_REGION=us-east-1'
alias tokyo='export AWS_DEFAULT_REGION=ap-northeast-1'
alias oregon='export AWS_DEFAULT_REGION=us-west-2'
alias ohaio='export AWS_DEFAULT_REGION=us-east-2'

# kubectl alias
alias k='kubectl'
alias kg='kubectl get'
alias ke='kubectl exec -it'
alias ka='kubectl apply -f'
alias kd='kubectl delete -f'
alias kpo='kubectl get pod'
alias kde='kubectl describe'
alias kbb='kubectl run busybox --image=busybox --rm -it --restart=Never --command --'

# helm alias
alias h='helm'
alias hs='helm show'
alias hl='helm list'
alias hr='helm repo'
alias hi='helm install'
alias hh='helm history'
alias hug='helm upgrade'
alias hrb='helm rollback'
alias hui='helm uninstall'

# GCP
alias gs='gsutil'
alias gc='gcloud'
alias gcm='gcloud compute'
alias gco='gcloud container'
alias gcl='gcloud container clusters'
alias gclg='gcloud container clusters get-credentials'
alias gi='gcloud compute instances'
alias gn='gcloud compute networks'
alias gcs='gcloud compute ssh'
alias gup='sudo /usr/local/src/google-cloud-sdk/bin/gcloud components update'
alias gcmp='sudo /usr/local/src/google-cloud-sdk/bin/gcloud components'
# alias gr ='gcloud run'
# alias grd ='gcloud run deploy'
# alias grs ='gcloud run service'

## GCP AI
alias gai='gcloud ai-platform'
alias gmo='gcloud models'

## GCP container cluster
alias gcoi='gcloud container images'
alias gcoc='gcloud container clusters'
alias gcon='gcloud container node-pools'
alias gcoo='gcloud container operations'
alias gcos='gcloud container subnets'
alias gcoh='gcloud container hub'
alias gcob='gcloud container binauthz'

# terraform command
alias t='terraform'
alias ta='terraform apply'
alias tp='terraform plan'
alias td='terraform destroy'
alias ti='terraform init'
alias tw='terraform workspace'
alias twl='terraform workspace list'
alias tws='terraform workspace select'
alias twn='terraform workspace new'
alias tgu='terraform get -update'

# tfenv
alias tf='tfenv'
alias tfu='tfenv use'
alias tfl='tfenv list'
alias tfi='tfenv install'
alias tflr='tfenv list-remote'

# terragrunt
alias tg='terragrunt run-all'
alias tgp='terragrunt run-all plan'
alias tga='terragrunt run-all apply'
alias tgw='terragrunt run-all workspace'
alias tgwn='terragrunt run-all workspace new'
alias tgws='terragrunt run-all workspace select'
alias tgo='terragrunt output'
alias tgd='terragrunt run-all destroy'
alias tgaf='terragrunt run-all apply --terragrunt-non-interactive'
alias tgdf='terragrunt run-all destroy --terragrunt-non-interactive'

# javascript
## reacr
alias rcp='create-react-app'

# typescript


# waypoint
alias wp='waypoint'
alias wb='waypoint build'
alias wa='waypoint artifact'
alias wup='waypoint up'
alias wui='waypoint ui'
alias wt='waypoint token'
alias wtn='waypoint token new'
alias wte='waypoint token exchange'
alias wti='waypoint token invite'
alias wins='waypoint install'
alias wini='waypoint init'
alias wdep='waypoint deployment'
alias wdst='waypoint destroy'
alias wlog='waypoint logs'
alias winsk='waypoint install --platform=kubernetes -accept-tos'

# packer
alias p='packer'
alias pb='packer build'

# docker
alias d='docker'
alias dru='docker run'
alias drm='docker rm'
alias drmi='docker rmi'
alias dc='docker-compose'
alias dcu='docker-compose up'
alias dcd='docker-compose down'
alias dcb='docker-compose build'
alias dcc='docker-compose create'
alias di='docker images'

# pdf(zathura)
alias pdf='zathura'
